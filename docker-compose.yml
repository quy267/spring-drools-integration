version: '3.8'

services:
  # Spring Boot Drools Integration Application
  spring-drools-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-drools-integration
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ruledb
      - SPRING_DATASOURCE_USERNAME=ruleuser
      - SPRING_DATASOURCE_PASSWORD=rulepass
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - APP_RULES_UPLOAD_DIR=/app/uploads
      - APP_RULES_BACKUP_DIR=/app/backups
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus,rule-engine,rule-metrics
    volumes:
      - ./rules:/app/rules:ro
      - app-logs:/app/logs
      - app-uploads:/app/uploads
      - app-backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring-drools-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spring-drools-postgres
    environment:
      - POSTGRES_DB=ruledb
      - POSTGRES_USER=ruleuser
      - POSTGRES_PASSWORD=rulepass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - spring-drools-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ruleuser -d ruledb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: spring-drools-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - spring-drools-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: spring-drools-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - spring-drools-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: spring-drools-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - spring-drools-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

networks:
  spring-drools-network:
    driver: bridge
    name: spring-drools-network

volumes:
  postgres-data:
    name: spring-drools-postgres-data
  prometheus-data:
    name: spring-drools-prometheus-data
  grafana-data:
    name: spring-drools-grafana-data
  redis-data:
    name: spring-drools-redis-data
  app-logs:
    name: spring-drools-app-logs
  app-uploads:
    name: spring-drools-app-uploads
  app-backups:
    name: spring-drools-app-backups